" vim: set ft=javascript
set all&
mapclear
cmapclear
imapclear

" 基本設定

" ブラウザタイトルの変更
set titlestring=Vimfox

" カラースキームの変更
colorscheme miku

" メニュー/ツール/リンクを表示
set gui=tabs
set notabnumbers
set noscrollbars
set defsearch=google

" ステータスバーの表示
set status=location,history,tabcount,position,input

" リンクのURIをコマンドラインに表示
set showstatuslinks=0

" 全て同じウィンドウに開く
set newtab=all

" アニメーション
set animations

" URLのオートコンプリート
set complete=lS

" テキストボックスに勝手にフォーカスしない
set focuscontent

" フォーム記入時にTextAreaモードを利用する
set insertmode

" ページ全体で検索語を強調表示
set hlsearch

" ビープ音を鳴らさずビジュアルベルを使用
set novisualbell

" テキストボックスにエディタを利用する
set editor="gvim -f -c ':set fenc=utf8'"

" コマンドラインへの移行時にIMEを指定の状態に切り替える
style -name commandline-ime chrome://* #liberator-commandline-command input {ime-mode: inactive;}

" Firefoxに関する設定
" アクセスキーを無効にする
set! ui.key.generalAccessKey=0

" タブのCloseボタンを消す
set! browser.tabs.closeButtons=2

" タブをタイトルバーに一体化
set! browser.tabs.drawInTitlebar=true

" Caretモードを見やすくする
set! ui.caretWidth=1
set! ui.caretBlinkTime=1000

" 最後のWindowを閉じてもFirefoxを終了しない
set! browser.tabs.closeWindowWithLastTab=false

" bookmarkletを利用可能にする
set! browser.urlbar.filter.javascript=false

" キャッシュをRAMに移動
set! browser.cache.disk.enable=true
set! browser.cache.memory.enable=true
set! browser.cache.memory.capacity=-1

" セッションマネージャ
set! extensions.sessionmanager.startup=2
set! extensions.sessionmanager.resume_session="backup.session"

" その他
set! network.http.pilelining=true
set! config.trim_on_minimize=true
set! browser.history_expire_days=30
set! browser.ctrlTab.previews=true
set! browser.history_expire_days_min=7
set! browser.history_expire_sites=1000
set! browser.sessionstore.max_tabs_undo=30
set! browser.sessionhistory.max_total_viewers=5
set! browser.tabs.loadInBackground=false

" 視覚に関する設定
" ヒントモードに使う文字の指定
set hintchars=;asdfghjkl

" 補完のURLが長すぎて、切れてしまう問題の対処
hi! CompResult -a -moz-binding: url(chrome://liberator/content/bindings.xml#compitem-td);
hi! CompDesc -a -moz-binding: url(chrome://liberator/content/bindings.xml#compitem-td);

" 日付を表示
command! date echo Date()

" 操作に関する設定
" Insertモードでキーバインドが効くようにする
javascript <<EOM
window.addEventListener('keypress',
    function(event){
        function killEvent (){
            (event.preventDefault(), event.stopPropagation())
        };
        if (liberator.mode === modes.COMMAND_LINE && modes.extended === modes.HINTS){
            let key = events.toString(event);
            if (/^<[CA]/(key)){
                killEvent()
            };
        }
        if (liberator.mode === modes.INSERT && modes.extended === modes.MENU){
            let key = events.toString(event);
            if (key == '<Space>'){
                return
            };
            let map = mappings.get(modes.INSERT, events.toString(event));
            if (map) {
                killEvent();
                map.execute();
            }
        }
    },
    false
);
EOM

" <C-h>で履歴を表示しないようにする
nnoremap <C-h> <Nop>
inoremap <C-h> <Nop>
" <C-j>でダウンロード履歴を表示しないようにする
nnoremap <C-j> <CR>
inoremap <C-j> <CR>
cnoremap <C-j> <CR>
" <C-l>でURLを開かないようにする
nnoremap <C-l> <Nop>
" <C-k>で検索ページを表示しないようにする
nnoremap <C-k> <Nop>

" eでecho表示
noremap e :<C-u>echo<Space>
noremap E :<C-u>echo!<Space>
" pでpanorama表示
noremap p :<C-u>panorama<Space>
" yで非Ascii文字列のURLでyankする
nnoremap y :<C-u>javascript util.copyToClipboard(buffer.URL);<CR>:echo "Yanked " + util.readFromClipboard();<CR>
" Uでundo一覧から開く
noremap U :<C-u>undo<Space>

" 移動する前の場所を記憶
nnoremap gg mzgg
nnoremap G  mzG
nnoremap /  mz/

" <A-p>/<A-n>で現在のタブの位置変更
noremap <A-p> :<C-u>tabmove! -1<CR><ESC>
noremap <A-n> :<C-u>tabmove! +1<CR><ESC>

" フレーム内移動
nnoremap < [f
nnoremap > ]f

" コマンドモードで<C-t>の挙動を変更する
cnoremap <C-t> <Tab>
cnoremap <S-C-t> <S-Tab>
" <C-r>で履歴を表示
cnoremap <C-r> <Up>

" Insertモードで<C-n>,<C-p>をカーソルキー代わりにする
inoremap <C-p> <Up>
cnoremap <C-p> <Up>
inoremap <C-n> <Down>
cnoremap <C-n> <Down>
" Insertモードからヒントモードに移行する
inoremap <C-f> <ESC>f
cnoremap <C-f> <ESC>f

" プラグインに関する設定
" lazyコマンドを用意する
command! lazy -nargs=+ autocmd VimperatorEnter .* <args>
" lo.js
noremap w :<C-u>lo<Space>

" statusline-toolbar.js
lazy set statuslinetoolbars=star-button,identity-box

" multi_requester.js
noremap mr :<C-u>mr<Space>
noremap ma :<C-u>mr<Space>alc<Space>
noremap mg :<C-u>mr<Space>goo<Space>
noremap me :<C-u>mr<Space>answers<Space>
noremap mw :<C-u>mr<Space>weather-yahoo<Space>

" FeedSomeKeys3.js
" google
lazy fmaps -u='mail\.google\.(com|co\.jp)/mail/' u k j o <CR> p n c ? x s y e m ! # h
lazy fmaps -u='www\.google\.(com|co\.jp)/reader/' -events=vkeypress j k <Space> <S-Space> X O N P s,NO a,PO S,s v r F,f f,j F,k ? /
" twitter.com
lazy fmaps -u='^https?://twitter\.com/' j k ?
lazy fmaps -u='^https?://twitter\.com/' -events=vkeydown n m t r gh gr gp gf gm
" rememberthemilk.com
lazy fmaps -u='https?://www\.rememberthemilk\.com/home/' j k m i c t ? F,f G,g S,s L,l Y,y H,h M,m <Del> <C-S-Left> <C-S-Right>
" tumblr.com
lazy fmaps -u='www\.tumblr\.com/dashboard' -events=vkeydown j k

" twittperator.js
let g:twittperator_use_chirp = 1
" 呟きに現在のページのタイトルとURLを追加
cabbrev -javascript .ggl ggl(buffer.URI)
cabbrev -javascript .url '" ' + buffer.title+ ' ' + ggl(buffer.URI) + ' "' 
javascript <<EOM
userContext.ggl = function getGoogleShortenURL(url, callback){
    let uri = "https://www.googleapis.com/urlshortener/v1/url";
    let xhr = new XMLHttpRequest();
    xhr.open("POST", uri, !!callback);
    if (callback){
        xhr.onreadystatechange = function(){
            if (xhr.readyState == 4 && xhr.status == 200){
                callback(JSON.parse(xhr.responseText));
            }
        }
    }
    xhr.setRequestHeader("Content-Type", "application/json");
    xhr.send(JSON.stringify({ longUrl: url || buffer.URL }));
    if (!callback){
        return JSON.parse(xhr.responseText).id;
    }
}
EOM

" JavaScriptに関する設定
" ワンライナーのための設定
javascript <<EOM
modules.__defineGetter__("doc", function() content.document.wrappedJSObject);
modules.__defineGetter__("win", function() content.window.wrappedJSObject);
EOM

" autocmd駆動時のエコーをやめる
javascript <<EOM
let (original = liberator.echomsg)
    liberator.echomsg = function(msg){
        const REAC = RegExp('@chrome://liberator/content/autocommands\\.js:\\d+');
        if (Error().stack.split(/\n/).some(RegExp.prototype.test.bind(REAC)) && /Executing .* Auto commands for .*/.test(msg))
            liberator.log(msg);
        else
            original.apply(liberator, arguments);
};
EOM

" コマンドラインでbangをトグル
javascript <<EOM
mappings.addUserMap([modes.COMMAND_LINE], ['<C-x>'], 'toggle bang',
    function(){
        let [,cmd,bang,args] = commands.parseCommand(commandline.command);
        bang = bang ? '' : '!';
        commandline.command = cmd + bang + ' ' + args;
    }
);
EOM

" コマンドラインを外部エディタで編集
javascript <<EOM
mappings.addUserMap([modes.COMMAND_LINE], ['<C-i>'], 'Edit commandline by external editor',
    function(){
        io.withTempFiles(
            function(file){
                file.write(commandline.command);
                editor.editFileExternally(file.path);
                commandline.open(":", file.read(), modes.EX);
                return true;
            }
        );
    }
);
EOM

" 戻るを拡張
javascript <<EOM
let back   = mappings.getDefault(modes.NORMAL, 'H').action;
let remove = mappings.getDefault(modes.NORMAL, 'd').action;
mappings.addUserMap([modes.NORMAL], ['H'], 'exteded back',
    function(){
        (gBrowser.sessionHistory.index > 0 ? back : remove)(-1)
    }
);
EOM

" <ESC>でiframeから抜ける
javascript <<EOM
eval(function () {
  //let map = mappings.getDefault(modes.NORMAL, '<ESC>');
  mappings.addUserMap(
    [modes.NORMAL],
    ['<ESC>'],
    'Focus to parent window',
    function() {
      if (modes.passNextKey || modes.passAllKeys)
        return events.onEscape();
      Buffer.focusedWindow = Buffer.focusedWindow.parent;
    },
    {}
  );
})();
EOM

" <C-c>で文字列をコピーまたはロードを止める
javascript <<EOM
mappings.addUserMap([modes.NORMAL,modes.VISUAL],['<C-c>'], 'Copy selected text or stop loading',
    function(){
        var sel = window.content.window.getSelection().toString();
        if (sel){
            util.copyToClipboard(sel,true);
        } else {
            BrowserStop();
            liberator.echo('Stopped loading !');
        }
    },{ rhs: 'Copy selected text or stop loading' }
);
EOM

" <C-c>でコマンドラインをクリップボードにコピー
javascript <<EOM
mappings.addUserMap([modes.COMMAND_LINE], ['<C-c>'], 'Copy current commandline',
    function(){
        util.copyToClipboard(commandline.command);
    }
);
EOM

" :mesで出てくるメッセージをクリップボードに送る
javascript <<EOM
commands.addUserCommand(['messcopy'], 'Copy messages to clipboard',
    function () {
        util.copyToClipboard(
            commandline._messageHistory._messages.map(
                function(it)
                let (v = it.str) (
                    typeof v === 'xml' ? v.textContent :
                    typeof v === 'object' ? (v + "\n" + v.stack) :
                    v
                )
            ).join("\n\n")
        );
    },{},
    true
);
EOM

" j,kキーでスムーススクロールする
javascript <<EOM
let self = (function(){
    mappings.addUserMap([modes.NORMAL], ["j"], "Smooth scroll down",
        function(count){
            self.smoothScrollBy(300 * (count || 1));
        },
        {count: true}
    );
    mappings.addUserMap([modes.NORMAL], ["k"], "Smooth scroll up",
        function(count){
            self.smoothScrollBy(300 * -(count || 1));
        },
        {count: true}
    );
    mappings.addUserMap([modes.NORMAL], ["<C-f>"], "Smooth page down",
        function(count){
            self.smoothScrollBy(650 * (count || 1));
        },
        {count: true}
    );
    mappings.addUserMap([modes.NORMAL], ["<C-b>"], "Smooth page up",
        function(count){
            self.smoothScrollBy(650 * -(count || 1));
        },
        {count: true}
    );

    var PUBLICS = {
        smoothScrollBy: function(moment){
            win = Buffer.findScrollableWindow();
            destY = win.scrollY + moment;
            clearTimeout(next);
            smoothScroll(moment);
        }
    }

    var next;
    var destY;
    var win;

    function smoothScroll(moment) {
        if (moment > 0){
            moment = Math.floor(moment / 2);
        } else {
            moment = Math.ceil(moment / 2);
        }
        win.scrollBy(0, moment);
        if (Math.abs(moment) < 1){
            setTimeout(makeScrollTo(win.scrollX, destY), 20);
            destY = null;
            return;
        }
        next = setTimeout(function() smoothScroll(moment), 20);
    }

    function makeScrollTo(x, y) function() win.scrollTo(x, y);
    return PUBLICS;
})();
EOM

" guを使いやすくする
javascript <<EOM
eval(function(){
    let regexp = new RegExp('([a-z]+://)([^/]*)(/.*)');
    let goUpPath = function(path){
        if (!path){
            return
        };
        path = path.replace(/\/$/,'').replace(/^\/+/,'');
        if (path.indexOf('#')>0){
            return path.replace(/#.*/,'');
        }
        if (path.indexOf('?')>0){
            return path.replace(/\?.*/,'');
        }
        path = path.replace(/\/+$/,'');
        if (path.indexOf('/')>0){
            return path.replace(/\/[^\/]*$/,'/');
        }
    }
    let goUpHost = function(host){
        if (/^[0-9+.:]+$/.test(host)){
            return host;
        };
        let hostSuffix='';
        let x=host.lastIndexOf(':');
        if (x>0){
            hostSuffix = host.substr(x);
            host = host.substr(0,x);
        }
        hostSuffix = host.substr(host.length-6)+hostSuffix;
        host = host.substr(0,host.length-6);
        return host.replace(/[^.]*\./,'')+hostSuffix;
    }
    mappings.addUserMap([modes.NORMAL], ["gu"], 'Smart Go to parent',
        function(count){
            if (count < 1){
                count = 1
            };
            let url = buffer.URL;
            let [all,scheme,host,path] = regexp.exec(url);
            path = path.replace(/\/$/,'').replace(/^\/+/,'');
            for (let i = 0; i < count; i++){
                if (path){
                    if (path = goUpPath(path)){
                        url = scheme+host+'/'+path;
                    } else {
                        url = scheme+host+'/';
                    }
                } else {
                    host = goUpHost(host);
                    url = scheme+host+'/';
                }
            }
            if (url == buffer.URL) {
                liberator.beep();
            } else {
                liberator.open(url);
            }
        },
        { count: true }
    );
})();
EOM

" /vimperator/stylesの中の.cssファイルを読み込む
javascript <<EOM
eval(function(){
    let filter = new RegExp('^.*\.css$');
    let dir = io.File('~/vimperator/styles');
    if (dir.exists() && dir.isDirectory() && dir.isReadable()){
        let files = dir.readDirectory(true);
        files.forEach(function(file){
            if (filter.test(file.path)){
                io.source(file.path, false);
            }
        });
    }
})();
EOM

" コマンドラインバグを修正するパッチ
js <<EOM
    liberator.registerObserver(
        'enter',
        function () {
            plugins.libly.$U.around(
                commandline,
                'input',
                function (next, [prompt, callback, extra]) {
                if (callback === finder.closure.onSubmit)
                    return next();
                if (extra && (extra.onChange === hints.closure._onInput))
                    return next();
                setTimeout(function () next(), 0);
                }
            );

            if (plugins.xHint) {
                [commands.get('xhint'), commands.get('xhintdo')].forEach(function (cmd) {
                plugins.libly.$U.around(
                    cmd,
                    'action',
                    function (next) setTimeout(function () next(), 0)
                );
                });
            }
        }
    );
EOM
